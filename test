(define p 61)
(define q 53)
(define n (* p q))
(define ln (lcm (- p 1) (- q 1)))
(define e 17)
(define d (modmul-inv e ln))

(define rsa-en (lambda x (mod (pow x e) n)))
(define rsa-de (lambda x (mod (pow x d) n)))

(define m 42)
(define c (rsa-en m))
(define m' (rsa-de c))

(define add (lambda x (lambda y (+ x y))))
(define add1 (add 1))
(add1 41)

(define Y (lambda f ((lambda x (f (x x))) (lambda x (f (x x))))))

(define factorial (Y (lambda f (lambda n (if (== n 0) 1 (* n (f (- n 1))))))))
(factorial 600)

(define fibonacci (Y (lambda f (lambda n (if (< n 2) n (+ (f (- n 1)) (f (- n 2))))))))
(fibonacci 20)
